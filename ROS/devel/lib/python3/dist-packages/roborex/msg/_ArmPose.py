# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborex/ArmPose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import roborex.msg

class ArmPose(genpy.Message):
  _md5sum = "a5e1af2ff95ce9860148ff20620f2dd0"
  _type = "roborex/ArmPose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """JointState world_joint
JointState base_joint
JointState shoulder_joint
JointState elbow_joint
JointState wrist_joint
JointState eff_joint
JointState gripper_offset_joint
JointState right_gripper_joint
JointState left_gripper_joint
================================================================================
MSG: roborex/JointState
geometry_msgs/Point translation
float32 angle
float32 upper_bound
float32 lower_bound
int32 axis

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['world_joint','base_joint','shoulder_joint','elbow_joint','wrist_joint','eff_joint','gripper_offset_joint','right_gripper_joint','left_gripper_joint']
  _slot_types = ['roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState','roborex/JointState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       world_joint,base_joint,shoulder_joint,elbow_joint,wrist_joint,eff_joint,gripper_offset_joint,right_gripper_joint,left_gripper_joint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmPose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.world_joint is None:
        self.world_joint = roborex.msg.JointState()
      if self.base_joint is None:
        self.base_joint = roborex.msg.JointState()
      if self.shoulder_joint is None:
        self.shoulder_joint = roborex.msg.JointState()
      if self.elbow_joint is None:
        self.elbow_joint = roborex.msg.JointState()
      if self.wrist_joint is None:
        self.wrist_joint = roborex.msg.JointState()
      if self.eff_joint is None:
        self.eff_joint = roborex.msg.JointState()
      if self.gripper_offset_joint is None:
        self.gripper_offset_joint = roborex.msg.JointState()
      if self.right_gripper_joint is None:
        self.right_gripper_joint = roborex.msg.JointState()
      if self.left_gripper_joint is None:
        self.left_gripper_joint = roborex.msg.JointState()
    else:
      self.world_joint = roborex.msg.JointState()
      self.base_joint = roborex.msg.JointState()
      self.shoulder_joint = roborex.msg.JointState()
      self.elbow_joint = roborex.msg.JointState()
      self.wrist_joint = roborex.msg.JointState()
      self.eff_joint = roborex.msg.JointState()
      self.gripper_offset_joint = roborex.msg.JointState()
      self.right_gripper_joint = roborex.msg.JointState()
      self.left_gripper_joint = roborex.msg.JointState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi().pack(_x.world_joint.translation.x, _x.world_joint.translation.y, _x.world_joint.translation.z, _x.world_joint.angle, _x.world_joint.upper_bound, _x.world_joint.lower_bound, _x.world_joint.axis, _x.base_joint.translation.x, _x.base_joint.translation.y, _x.base_joint.translation.z, _x.base_joint.angle, _x.base_joint.upper_bound, _x.base_joint.lower_bound, _x.base_joint.axis, _x.shoulder_joint.translation.x, _x.shoulder_joint.translation.y, _x.shoulder_joint.translation.z, _x.shoulder_joint.angle, _x.shoulder_joint.upper_bound, _x.shoulder_joint.lower_bound, _x.shoulder_joint.axis, _x.elbow_joint.translation.x, _x.elbow_joint.translation.y, _x.elbow_joint.translation.z, _x.elbow_joint.angle, _x.elbow_joint.upper_bound, _x.elbow_joint.lower_bound, _x.elbow_joint.axis, _x.wrist_joint.translation.x, _x.wrist_joint.translation.y, _x.wrist_joint.translation.z, _x.wrist_joint.angle, _x.wrist_joint.upper_bound, _x.wrist_joint.lower_bound, _x.wrist_joint.axis, _x.eff_joint.translation.x, _x.eff_joint.translation.y, _x.eff_joint.translation.z, _x.eff_joint.angle, _x.eff_joint.upper_bound, _x.eff_joint.lower_bound, _x.eff_joint.axis, _x.gripper_offset_joint.translation.x, _x.gripper_offset_joint.translation.y, _x.gripper_offset_joint.translation.z, _x.gripper_offset_joint.angle, _x.gripper_offset_joint.upper_bound, _x.gripper_offset_joint.lower_bound, _x.gripper_offset_joint.axis, _x.right_gripper_joint.translation.x, _x.right_gripper_joint.translation.y, _x.right_gripper_joint.translation.z, _x.right_gripper_joint.angle, _x.right_gripper_joint.upper_bound, _x.right_gripper_joint.lower_bound, _x.right_gripper_joint.axis, _x.left_gripper_joint.translation.x, _x.left_gripper_joint.translation.y, _x.left_gripper_joint.translation.z, _x.left_gripper_joint.angle, _x.left_gripper_joint.upper_bound, _x.left_gripper_joint.lower_bound, _x.left_gripper_joint.axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_joint is None:
        self.world_joint = roborex.msg.JointState()
      if self.base_joint is None:
        self.base_joint = roborex.msg.JointState()
      if self.shoulder_joint is None:
        self.shoulder_joint = roborex.msg.JointState()
      if self.elbow_joint is None:
        self.elbow_joint = roborex.msg.JointState()
      if self.wrist_joint is None:
        self.wrist_joint = roborex.msg.JointState()
      if self.eff_joint is None:
        self.eff_joint = roborex.msg.JointState()
      if self.gripper_offset_joint is None:
        self.gripper_offset_joint = roborex.msg.JointState()
      if self.right_gripper_joint is None:
        self.right_gripper_joint = roborex.msg.JointState()
      if self.left_gripper_joint is None:
        self.left_gripper_joint = roborex.msg.JointState()
      end = 0
      _x = self
      start = end
      end += 360
      (_x.world_joint.translation.x, _x.world_joint.translation.y, _x.world_joint.translation.z, _x.world_joint.angle, _x.world_joint.upper_bound, _x.world_joint.lower_bound, _x.world_joint.axis, _x.base_joint.translation.x, _x.base_joint.translation.y, _x.base_joint.translation.z, _x.base_joint.angle, _x.base_joint.upper_bound, _x.base_joint.lower_bound, _x.base_joint.axis, _x.shoulder_joint.translation.x, _x.shoulder_joint.translation.y, _x.shoulder_joint.translation.z, _x.shoulder_joint.angle, _x.shoulder_joint.upper_bound, _x.shoulder_joint.lower_bound, _x.shoulder_joint.axis, _x.elbow_joint.translation.x, _x.elbow_joint.translation.y, _x.elbow_joint.translation.z, _x.elbow_joint.angle, _x.elbow_joint.upper_bound, _x.elbow_joint.lower_bound, _x.elbow_joint.axis, _x.wrist_joint.translation.x, _x.wrist_joint.translation.y, _x.wrist_joint.translation.z, _x.wrist_joint.angle, _x.wrist_joint.upper_bound, _x.wrist_joint.lower_bound, _x.wrist_joint.axis, _x.eff_joint.translation.x, _x.eff_joint.translation.y, _x.eff_joint.translation.z, _x.eff_joint.angle, _x.eff_joint.upper_bound, _x.eff_joint.lower_bound, _x.eff_joint.axis, _x.gripper_offset_joint.translation.x, _x.gripper_offset_joint.translation.y, _x.gripper_offset_joint.translation.z, _x.gripper_offset_joint.angle, _x.gripper_offset_joint.upper_bound, _x.gripper_offset_joint.lower_bound, _x.gripper_offset_joint.axis, _x.right_gripper_joint.translation.x, _x.right_gripper_joint.translation.y, _x.right_gripper_joint.translation.z, _x.right_gripper_joint.angle, _x.right_gripper_joint.upper_bound, _x.right_gripper_joint.lower_bound, _x.right_gripper_joint.axis, _x.left_gripper_joint.translation.x, _x.left_gripper_joint.translation.y, _x.left_gripper_joint.translation.z, _x.left_gripper_joint.angle, _x.left_gripper_joint.upper_bound, _x.left_gripper_joint.lower_bound, _x.left_gripper_joint.axis,) = _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi().pack(_x.world_joint.translation.x, _x.world_joint.translation.y, _x.world_joint.translation.z, _x.world_joint.angle, _x.world_joint.upper_bound, _x.world_joint.lower_bound, _x.world_joint.axis, _x.base_joint.translation.x, _x.base_joint.translation.y, _x.base_joint.translation.z, _x.base_joint.angle, _x.base_joint.upper_bound, _x.base_joint.lower_bound, _x.base_joint.axis, _x.shoulder_joint.translation.x, _x.shoulder_joint.translation.y, _x.shoulder_joint.translation.z, _x.shoulder_joint.angle, _x.shoulder_joint.upper_bound, _x.shoulder_joint.lower_bound, _x.shoulder_joint.axis, _x.elbow_joint.translation.x, _x.elbow_joint.translation.y, _x.elbow_joint.translation.z, _x.elbow_joint.angle, _x.elbow_joint.upper_bound, _x.elbow_joint.lower_bound, _x.elbow_joint.axis, _x.wrist_joint.translation.x, _x.wrist_joint.translation.y, _x.wrist_joint.translation.z, _x.wrist_joint.angle, _x.wrist_joint.upper_bound, _x.wrist_joint.lower_bound, _x.wrist_joint.axis, _x.eff_joint.translation.x, _x.eff_joint.translation.y, _x.eff_joint.translation.z, _x.eff_joint.angle, _x.eff_joint.upper_bound, _x.eff_joint.lower_bound, _x.eff_joint.axis, _x.gripper_offset_joint.translation.x, _x.gripper_offset_joint.translation.y, _x.gripper_offset_joint.translation.z, _x.gripper_offset_joint.angle, _x.gripper_offset_joint.upper_bound, _x.gripper_offset_joint.lower_bound, _x.gripper_offset_joint.axis, _x.right_gripper_joint.translation.x, _x.right_gripper_joint.translation.y, _x.right_gripper_joint.translation.z, _x.right_gripper_joint.angle, _x.right_gripper_joint.upper_bound, _x.right_gripper_joint.lower_bound, _x.right_gripper_joint.axis, _x.left_gripper_joint.translation.x, _x.left_gripper_joint.translation.y, _x.left_gripper_joint.translation.z, _x.left_gripper_joint.angle, _x.left_gripper_joint.upper_bound, _x.left_gripper_joint.lower_bound, _x.left_gripper_joint.axis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_joint is None:
        self.world_joint = roborex.msg.JointState()
      if self.base_joint is None:
        self.base_joint = roborex.msg.JointState()
      if self.shoulder_joint is None:
        self.shoulder_joint = roborex.msg.JointState()
      if self.elbow_joint is None:
        self.elbow_joint = roborex.msg.JointState()
      if self.wrist_joint is None:
        self.wrist_joint = roborex.msg.JointState()
      if self.eff_joint is None:
        self.eff_joint = roborex.msg.JointState()
      if self.gripper_offset_joint is None:
        self.gripper_offset_joint = roborex.msg.JointState()
      if self.right_gripper_joint is None:
        self.right_gripper_joint = roborex.msg.JointState()
      if self.left_gripper_joint is None:
        self.left_gripper_joint = roborex.msg.JointState()
      end = 0
      _x = self
      start = end
      end += 360
      (_x.world_joint.translation.x, _x.world_joint.translation.y, _x.world_joint.translation.z, _x.world_joint.angle, _x.world_joint.upper_bound, _x.world_joint.lower_bound, _x.world_joint.axis, _x.base_joint.translation.x, _x.base_joint.translation.y, _x.base_joint.translation.z, _x.base_joint.angle, _x.base_joint.upper_bound, _x.base_joint.lower_bound, _x.base_joint.axis, _x.shoulder_joint.translation.x, _x.shoulder_joint.translation.y, _x.shoulder_joint.translation.z, _x.shoulder_joint.angle, _x.shoulder_joint.upper_bound, _x.shoulder_joint.lower_bound, _x.shoulder_joint.axis, _x.elbow_joint.translation.x, _x.elbow_joint.translation.y, _x.elbow_joint.translation.z, _x.elbow_joint.angle, _x.elbow_joint.upper_bound, _x.elbow_joint.lower_bound, _x.elbow_joint.axis, _x.wrist_joint.translation.x, _x.wrist_joint.translation.y, _x.wrist_joint.translation.z, _x.wrist_joint.angle, _x.wrist_joint.upper_bound, _x.wrist_joint.lower_bound, _x.wrist_joint.axis, _x.eff_joint.translation.x, _x.eff_joint.translation.y, _x.eff_joint.translation.z, _x.eff_joint.angle, _x.eff_joint.upper_bound, _x.eff_joint.lower_bound, _x.eff_joint.axis, _x.gripper_offset_joint.translation.x, _x.gripper_offset_joint.translation.y, _x.gripper_offset_joint.translation.z, _x.gripper_offset_joint.angle, _x.gripper_offset_joint.upper_bound, _x.gripper_offset_joint.lower_bound, _x.gripper_offset_joint.axis, _x.right_gripper_joint.translation.x, _x.right_gripper_joint.translation.y, _x.right_gripper_joint.translation.z, _x.right_gripper_joint.angle, _x.right_gripper_joint.upper_bound, _x.right_gripper_joint.lower_bound, _x.right_gripper_joint.axis, _x.left_gripper_joint.translation.x, _x.left_gripper_joint.translation.y, _x.left_gripper_joint.translation.z, _x.left_gripper_joint.angle, _x.left_gripper_joint.upper_bound, _x.left_gripper_joint.lower_bound, _x.left_gripper_joint.axis,) = _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi = None
def _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi():
    global _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi
    if _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi is None:
        _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi = struct.Struct("<3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi")
    return _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi
