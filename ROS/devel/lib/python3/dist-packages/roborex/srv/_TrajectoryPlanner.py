# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborex/TrajectoryPlannerRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import roborex.msg

class TrajectoryPlannerRequest(genpy.Message):
  _md5sum = "2bac259c1bc1ea5c349be865d7f376a1"
  _type = "roborex/TrajectoryPlannerRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ArmPose arm_pose
geometry_msgs/Pose target
bool grasp_trajectory
bool release_trajectory

================================================================================
MSG: roborex/ArmPose
JointState world_joint
JointState base_joint
JointState shoulder_joint
JointState elbow_joint
JointState wrist_joint
JointState eff_joint
JointState gripper_offset_joint
JointState right_gripper_joint
JointState left_gripper_joint
================================================================================
MSG: roborex/JointState
geometry_msgs/Point translation
float32 angle
float32 upper_bound
float32 lower_bound
int32 axis

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['arm_pose','target','grasp_trajectory','release_trajectory']
  _slot_types = ['roborex/ArmPose','geometry_msgs/Pose','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       arm_pose,target,grasp_trajectory,release_trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPlannerRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.arm_pose is None:
        self.arm_pose = roborex.msg.ArmPose()
      if self.target is None:
        self.target = geometry_msgs.msg.Pose()
      if self.grasp_trajectory is None:
        self.grasp_trajectory = False
      if self.release_trajectory is None:
        self.release_trajectory = False
    else:
      self.arm_pose = roborex.msg.ArmPose()
      self.target = geometry_msgs.msg.Pose()
      self.grasp_trajectory = False
      self.release_trajectory = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B().pack(_x.arm_pose.world_joint.translation.x, _x.arm_pose.world_joint.translation.y, _x.arm_pose.world_joint.translation.z, _x.arm_pose.world_joint.angle, _x.arm_pose.world_joint.upper_bound, _x.arm_pose.world_joint.lower_bound, _x.arm_pose.world_joint.axis, _x.arm_pose.base_joint.translation.x, _x.arm_pose.base_joint.translation.y, _x.arm_pose.base_joint.translation.z, _x.arm_pose.base_joint.angle, _x.arm_pose.base_joint.upper_bound, _x.arm_pose.base_joint.lower_bound, _x.arm_pose.base_joint.axis, _x.arm_pose.shoulder_joint.translation.x, _x.arm_pose.shoulder_joint.translation.y, _x.arm_pose.shoulder_joint.translation.z, _x.arm_pose.shoulder_joint.angle, _x.arm_pose.shoulder_joint.upper_bound, _x.arm_pose.shoulder_joint.lower_bound, _x.arm_pose.shoulder_joint.axis, _x.arm_pose.elbow_joint.translation.x, _x.arm_pose.elbow_joint.translation.y, _x.arm_pose.elbow_joint.translation.z, _x.arm_pose.elbow_joint.angle, _x.arm_pose.elbow_joint.upper_bound, _x.arm_pose.elbow_joint.lower_bound, _x.arm_pose.elbow_joint.axis, _x.arm_pose.wrist_joint.translation.x, _x.arm_pose.wrist_joint.translation.y, _x.arm_pose.wrist_joint.translation.z, _x.arm_pose.wrist_joint.angle, _x.arm_pose.wrist_joint.upper_bound, _x.arm_pose.wrist_joint.lower_bound, _x.arm_pose.wrist_joint.axis, _x.arm_pose.eff_joint.translation.x, _x.arm_pose.eff_joint.translation.y, _x.arm_pose.eff_joint.translation.z, _x.arm_pose.eff_joint.angle, _x.arm_pose.eff_joint.upper_bound, _x.arm_pose.eff_joint.lower_bound, _x.arm_pose.eff_joint.axis, _x.arm_pose.gripper_offset_joint.translation.x, _x.arm_pose.gripper_offset_joint.translation.y, _x.arm_pose.gripper_offset_joint.translation.z, _x.arm_pose.gripper_offset_joint.angle, _x.arm_pose.gripper_offset_joint.upper_bound, _x.arm_pose.gripper_offset_joint.lower_bound, _x.arm_pose.gripper_offset_joint.axis, _x.arm_pose.right_gripper_joint.translation.x, _x.arm_pose.right_gripper_joint.translation.y, _x.arm_pose.right_gripper_joint.translation.z, _x.arm_pose.right_gripper_joint.angle, _x.arm_pose.right_gripper_joint.upper_bound, _x.arm_pose.right_gripper_joint.lower_bound, _x.arm_pose.right_gripper_joint.axis, _x.arm_pose.left_gripper_joint.translation.x, _x.arm_pose.left_gripper_joint.translation.y, _x.arm_pose.left_gripper_joint.translation.z, _x.arm_pose.left_gripper_joint.angle, _x.arm_pose.left_gripper_joint.upper_bound, _x.arm_pose.left_gripper_joint.lower_bound, _x.arm_pose.left_gripper_joint.axis, _x.target.position.x, _x.target.position.y, _x.target.position.z, _x.target.orientation.x, _x.target.orientation.y, _x.target.orientation.z, _x.target.orientation.w, _x.grasp_trajectory, _x.release_trajectory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.arm_pose is None:
        self.arm_pose = roborex.msg.ArmPose()
      if self.target is None:
        self.target = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 418
      (_x.arm_pose.world_joint.translation.x, _x.arm_pose.world_joint.translation.y, _x.arm_pose.world_joint.translation.z, _x.arm_pose.world_joint.angle, _x.arm_pose.world_joint.upper_bound, _x.arm_pose.world_joint.lower_bound, _x.arm_pose.world_joint.axis, _x.arm_pose.base_joint.translation.x, _x.arm_pose.base_joint.translation.y, _x.arm_pose.base_joint.translation.z, _x.arm_pose.base_joint.angle, _x.arm_pose.base_joint.upper_bound, _x.arm_pose.base_joint.lower_bound, _x.arm_pose.base_joint.axis, _x.arm_pose.shoulder_joint.translation.x, _x.arm_pose.shoulder_joint.translation.y, _x.arm_pose.shoulder_joint.translation.z, _x.arm_pose.shoulder_joint.angle, _x.arm_pose.shoulder_joint.upper_bound, _x.arm_pose.shoulder_joint.lower_bound, _x.arm_pose.shoulder_joint.axis, _x.arm_pose.elbow_joint.translation.x, _x.arm_pose.elbow_joint.translation.y, _x.arm_pose.elbow_joint.translation.z, _x.arm_pose.elbow_joint.angle, _x.arm_pose.elbow_joint.upper_bound, _x.arm_pose.elbow_joint.lower_bound, _x.arm_pose.elbow_joint.axis, _x.arm_pose.wrist_joint.translation.x, _x.arm_pose.wrist_joint.translation.y, _x.arm_pose.wrist_joint.translation.z, _x.arm_pose.wrist_joint.angle, _x.arm_pose.wrist_joint.upper_bound, _x.arm_pose.wrist_joint.lower_bound, _x.arm_pose.wrist_joint.axis, _x.arm_pose.eff_joint.translation.x, _x.arm_pose.eff_joint.translation.y, _x.arm_pose.eff_joint.translation.z, _x.arm_pose.eff_joint.angle, _x.arm_pose.eff_joint.upper_bound, _x.arm_pose.eff_joint.lower_bound, _x.arm_pose.eff_joint.axis, _x.arm_pose.gripper_offset_joint.translation.x, _x.arm_pose.gripper_offset_joint.translation.y, _x.arm_pose.gripper_offset_joint.translation.z, _x.arm_pose.gripper_offset_joint.angle, _x.arm_pose.gripper_offset_joint.upper_bound, _x.arm_pose.gripper_offset_joint.lower_bound, _x.arm_pose.gripper_offset_joint.axis, _x.arm_pose.right_gripper_joint.translation.x, _x.arm_pose.right_gripper_joint.translation.y, _x.arm_pose.right_gripper_joint.translation.z, _x.arm_pose.right_gripper_joint.angle, _x.arm_pose.right_gripper_joint.upper_bound, _x.arm_pose.right_gripper_joint.lower_bound, _x.arm_pose.right_gripper_joint.axis, _x.arm_pose.left_gripper_joint.translation.x, _x.arm_pose.left_gripper_joint.translation.y, _x.arm_pose.left_gripper_joint.translation.z, _x.arm_pose.left_gripper_joint.angle, _x.arm_pose.left_gripper_joint.upper_bound, _x.arm_pose.left_gripper_joint.lower_bound, _x.arm_pose.left_gripper_joint.axis, _x.target.position.x, _x.target.position.y, _x.target.position.z, _x.target.orientation.x, _x.target.orientation.y, _x.target.orientation.z, _x.target.orientation.w, _x.grasp_trajectory, _x.release_trajectory,) = _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B().unpack(str[start:end])
      self.grasp_trajectory = bool(self.grasp_trajectory)
      self.release_trajectory = bool(self.release_trajectory)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B().pack(_x.arm_pose.world_joint.translation.x, _x.arm_pose.world_joint.translation.y, _x.arm_pose.world_joint.translation.z, _x.arm_pose.world_joint.angle, _x.arm_pose.world_joint.upper_bound, _x.arm_pose.world_joint.lower_bound, _x.arm_pose.world_joint.axis, _x.arm_pose.base_joint.translation.x, _x.arm_pose.base_joint.translation.y, _x.arm_pose.base_joint.translation.z, _x.arm_pose.base_joint.angle, _x.arm_pose.base_joint.upper_bound, _x.arm_pose.base_joint.lower_bound, _x.arm_pose.base_joint.axis, _x.arm_pose.shoulder_joint.translation.x, _x.arm_pose.shoulder_joint.translation.y, _x.arm_pose.shoulder_joint.translation.z, _x.arm_pose.shoulder_joint.angle, _x.arm_pose.shoulder_joint.upper_bound, _x.arm_pose.shoulder_joint.lower_bound, _x.arm_pose.shoulder_joint.axis, _x.arm_pose.elbow_joint.translation.x, _x.arm_pose.elbow_joint.translation.y, _x.arm_pose.elbow_joint.translation.z, _x.arm_pose.elbow_joint.angle, _x.arm_pose.elbow_joint.upper_bound, _x.arm_pose.elbow_joint.lower_bound, _x.arm_pose.elbow_joint.axis, _x.arm_pose.wrist_joint.translation.x, _x.arm_pose.wrist_joint.translation.y, _x.arm_pose.wrist_joint.translation.z, _x.arm_pose.wrist_joint.angle, _x.arm_pose.wrist_joint.upper_bound, _x.arm_pose.wrist_joint.lower_bound, _x.arm_pose.wrist_joint.axis, _x.arm_pose.eff_joint.translation.x, _x.arm_pose.eff_joint.translation.y, _x.arm_pose.eff_joint.translation.z, _x.arm_pose.eff_joint.angle, _x.arm_pose.eff_joint.upper_bound, _x.arm_pose.eff_joint.lower_bound, _x.arm_pose.eff_joint.axis, _x.arm_pose.gripper_offset_joint.translation.x, _x.arm_pose.gripper_offset_joint.translation.y, _x.arm_pose.gripper_offset_joint.translation.z, _x.arm_pose.gripper_offset_joint.angle, _x.arm_pose.gripper_offset_joint.upper_bound, _x.arm_pose.gripper_offset_joint.lower_bound, _x.arm_pose.gripper_offset_joint.axis, _x.arm_pose.right_gripper_joint.translation.x, _x.arm_pose.right_gripper_joint.translation.y, _x.arm_pose.right_gripper_joint.translation.z, _x.arm_pose.right_gripper_joint.angle, _x.arm_pose.right_gripper_joint.upper_bound, _x.arm_pose.right_gripper_joint.lower_bound, _x.arm_pose.right_gripper_joint.axis, _x.arm_pose.left_gripper_joint.translation.x, _x.arm_pose.left_gripper_joint.translation.y, _x.arm_pose.left_gripper_joint.translation.z, _x.arm_pose.left_gripper_joint.angle, _x.arm_pose.left_gripper_joint.upper_bound, _x.arm_pose.left_gripper_joint.lower_bound, _x.arm_pose.left_gripper_joint.axis, _x.target.position.x, _x.target.position.y, _x.target.position.z, _x.target.orientation.x, _x.target.orientation.y, _x.target.orientation.z, _x.target.orientation.w, _x.grasp_trajectory, _x.release_trajectory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.arm_pose is None:
        self.arm_pose = roborex.msg.ArmPose()
      if self.target is None:
        self.target = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 418
      (_x.arm_pose.world_joint.translation.x, _x.arm_pose.world_joint.translation.y, _x.arm_pose.world_joint.translation.z, _x.arm_pose.world_joint.angle, _x.arm_pose.world_joint.upper_bound, _x.arm_pose.world_joint.lower_bound, _x.arm_pose.world_joint.axis, _x.arm_pose.base_joint.translation.x, _x.arm_pose.base_joint.translation.y, _x.arm_pose.base_joint.translation.z, _x.arm_pose.base_joint.angle, _x.arm_pose.base_joint.upper_bound, _x.arm_pose.base_joint.lower_bound, _x.arm_pose.base_joint.axis, _x.arm_pose.shoulder_joint.translation.x, _x.arm_pose.shoulder_joint.translation.y, _x.arm_pose.shoulder_joint.translation.z, _x.arm_pose.shoulder_joint.angle, _x.arm_pose.shoulder_joint.upper_bound, _x.arm_pose.shoulder_joint.lower_bound, _x.arm_pose.shoulder_joint.axis, _x.arm_pose.elbow_joint.translation.x, _x.arm_pose.elbow_joint.translation.y, _x.arm_pose.elbow_joint.translation.z, _x.arm_pose.elbow_joint.angle, _x.arm_pose.elbow_joint.upper_bound, _x.arm_pose.elbow_joint.lower_bound, _x.arm_pose.elbow_joint.axis, _x.arm_pose.wrist_joint.translation.x, _x.arm_pose.wrist_joint.translation.y, _x.arm_pose.wrist_joint.translation.z, _x.arm_pose.wrist_joint.angle, _x.arm_pose.wrist_joint.upper_bound, _x.arm_pose.wrist_joint.lower_bound, _x.arm_pose.wrist_joint.axis, _x.arm_pose.eff_joint.translation.x, _x.arm_pose.eff_joint.translation.y, _x.arm_pose.eff_joint.translation.z, _x.arm_pose.eff_joint.angle, _x.arm_pose.eff_joint.upper_bound, _x.arm_pose.eff_joint.lower_bound, _x.arm_pose.eff_joint.axis, _x.arm_pose.gripper_offset_joint.translation.x, _x.arm_pose.gripper_offset_joint.translation.y, _x.arm_pose.gripper_offset_joint.translation.z, _x.arm_pose.gripper_offset_joint.angle, _x.arm_pose.gripper_offset_joint.upper_bound, _x.arm_pose.gripper_offset_joint.lower_bound, _x.arm_pose.gripper_offset_joint.axis, _x.arm_pose.right_gripper_joint.translation.x, _x.arm_pose.right_gripper_joint.translation.y, _x.arm_pose.right_gripper_joint.translation.z, _x.arm_pose.right_gripper_joint.angle, _x.arm_pose.right_gripper_joint.upper_bound, _x.arm_pose.right_gripper_joint.lower_bound, _x.arm_pose.right_gripper_joint.axis, _x.arm_pose.left_gripper_joint.translation.x, _x.arm_pose.left_gripper_joint.translation.y, _x.arm_pose.left_gripper_joint.translation.z, _x.arm_pose.left_gripper_joint.angle, _x.arm_pose.left_gripper_joint.upper_bound, _x.arm_pose.left_gripper_joint.lower_bound, _x.arm_pose.left_gripper_joint.axis, _x.target.position.x, _x.target.position.y, _x.target.position.z, _x.target.orientation.x, _x.target.orientation.y, _x.target.orientation.z, _x.target.orientation.w, _x.grasp_trajectory, _x.release_trajectory,) = _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B().unpack(str[start:end])
      self.grasp_trajectory = bool(self.grasp_trajectory)
      self.release_trajectory = bool(self.release_trajectory)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B = None
def _get_struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B():
    global _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B
    if _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B is None:
        _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B = struct.Struct("<3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B")
    return _struct_3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi3d3fi7d2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborex/TrajectoryPlannerResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import roborex.msg

class TrajectoryPlannerResponse(genpy.Message):
  _md5sum = "8815e9c3c7e5428d6d83e942eb0b7216"
  _type = "roborex/TrajectoryPlannerResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Trajectory[] trajectories

================================================================================
MSG: roborex/Trajectory
ArmPose[] poses
int32 id

================================================================================
MSG: roborex/ArmPose
JointState world_joint
JointState base_joint
JointState shoulder_joint
JointState elbow_joint
JointState wrist_joint
JointState eff_joint
JointState gripper_offset_joint
JointState right_gripper_joint
JointState left_gripper_joint
================================================================================
MSG: roborex/JointState
geometry_msgs/Point translation
float32 angle
float32 upper_bound
float32 lower_bound
int32 axis

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['trajectories']
  _slot_types = ['roborex/Trajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPlannerResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectories is None:
        self.trajectories = []
    else:
      self.trajectories = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v1 = val2.world_joint
          _v2 = _v1.translation
          _x = _v2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v1
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v3 = val2.base_joint
          _v4 = _v3.translation
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v3
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v5 = val2.shoulder_joint
          _v6 = _v5.translation
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v5
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v7 = val2.elbow_joint
          _v8 = _v7.translation
          _x = _v8
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v7
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v9 = val2.wrist_joint
          _v10 = _v9.translation
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v9
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v11 = val2.eff_joint
          _v12 = _v11.translation
          _x = _v12
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v11
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v13 = val2.gripper_offset_joint
          _v14 = _v13.translation
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v13
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v15 = val2.right_gripper_joint
          _v16 = _v15.translation
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v15
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v17 = val2.left_gripper_joint
          _v18 = _v17.translation
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v17
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = roborex.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = roborex.msg.ArmPose()
          _v19 = val2.world_joint
          _v20 = _v19.translation
          _x = _v20
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v19
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v21 = val2.base_joint
          _v22 = _v21.translation
          _x = _v22
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v21
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v23 = val2.shoulder_joint
          _v24 = _v23.translation
          _x = _v24
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v23
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v25 = val2.elbow_joint
          _v26 = _v25.translation
          _x = _v26
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v25
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v27 = val2.wrist_joint
          _v28 = _v27.translation
          _x = _v28
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v27
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v29 = val2.eff_joint
          _v30 = _v29.translation
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v29
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v31 = val2.gripper_offset_joint
          _v32 = _v31.translation
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v31
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v33 = val2.right_gripper_joint
          _v34 = _v33.translation
          _x = _v34
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v33
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v35 = val2.left_gripper_joint
          _v36 = _v35.translation
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v35
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          val1.poses.append(val2)
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v37 = val2.world_joint
          _v38 = _v37.translation
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v37
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v39 = val2.base_joint
          _v40 = _v39.translation
          _x = _v40
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v39
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v41 = val2.shoulder_joint
          _v42 = _v41.translation
          _x = _v42
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v41
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v43 = val2.elbow_joint
          _v44 = _v43.translation
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v43
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v45 = val2.wrist_joint
          _v46 = _v45.translation
          _x = _v46
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v45
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v47 = val2.eff_joint
          _v48 = _v47.translation
          _x = _v48
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v47
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v49 = val2.gripper_offset_joint
          _v50 = _v49.translation
          _x = _v50
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v49
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v51 = val2.right_gripper_joint
          _v52 = _v51.translation
          _x = _v52
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v51
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
          _v53 = val2.left_gripper_joint
          _v54 = _v53.translation
          _x = _v54
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = _v53
          buff.write(_get_struct_3fi().pack(_x.angle, _x.upper_bound, _x.lower_bound, _x.axis))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = roborex.msg.Trajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = roborex.msg.ArmPose()
          _v55 = val2.world_joint
          _v56 = _v55.translation
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v55
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v57 = val2.base_joint
          _v58 = _v57.translation
          _x = _v58
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v57
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v59 = val2.shoulder_joint
          _v60 = _v59.translation
          _x = _v60
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v59
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v61 = val2.elbow_joint
          _v62 = _v61.translation
          _x = _v62
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v61
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v63 = val2.wrist_joint
          _v64 = _v63.translation
          _x = _v64
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v63
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v65 = val2.eff_joint
          _v66 = _v65.translation
          _x = _v66
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v65
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v67 = val2.gripper_offset_joint
          _v68 = _v67.translation
          _x = _v68
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v67
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v69 = val2.right_gripper_joint
          _v70 = _v69.translation
          _x = _v70
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v69
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          _v71 = val2.left_gripper_joint
          _v72 = _v71.translation
          _x = _v72
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = _v71
          start = end
          end += 16
          (_x.angle, _x.upper_bound, _x.lower_bound, _x.axis,) = _get_struct_3fi().unpack(str[start:end])
          val1.poses.append(val2)
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3fi = None
def _get_struct_3fi():
    global _struct_3fi
    if _struct_3fi is None:
        _struct_3fi = struct.Struct("<3fi")
    return _struct_3fi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class TrajectoryPlanner(object):
  _type          = 'roborex/TrajectoryPlanner'
  _md5sum = '367c998270ed8c4c22d2346f6cade297'
  _request_class  = TrajectoryPlannerRequest
  _response_class = TrajectoryPlannerResponse
