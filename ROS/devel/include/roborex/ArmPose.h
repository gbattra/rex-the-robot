// Generated by gencpp from file roborex/ArmPose.msg
// DO NOT EDIT!


#ifndef ROBOREX_MESSAGE_ARMPOSE_H
#define ROBOREX_MESSAGE_ARMPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>
#include <roborex/JointState.h>

namespace roborex
{
template <class ContainerAllocator>
struct ArmPose_
{
  typedef ArmPose_<ContainerAllocator> Type;

  ArmPose_()
    : world_joint()
    , base_joint()
    , shoulder_joint()
    , elbow_joint()
    , wrist_joint()
    , eff_joint()
    , gripper_offset_joint()
    , right_gripper_joint()
    , left_gripper_joint()  {
    }
  ArmPose_(const ContainerAllocator& _alloc)
    : world_joint(_alloc)
    , base_joint(_alloc)
    , shoulder_joint(_alloc)
    , elbow_joint(_alloc)
    , wrist_joint(_alloc)
    , eff_joint(_alloc)
    , gripper_offset_joint(_alloc)
    , right_gripper_joint(_alloc)
    , left_gripper_joint(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roborex::JointState_<ContainerAllocator>  _world_joint_type;
  _world_joint_type world_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _base_joint_type;
  _base_joint_type base_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _shoulder_joint_type;
  _shoulder_joint_type shoulder_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _elbow_joint_type;
  _elbow_joint_type elbow_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _wrist_joint_type;
  _wrist_joint_type wrist_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _eff_joint_type;
  _eff_joint_type eff_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _gripper_offset_joint_type;
  _gripper_offset_joint_type gripper_offset_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _right_gripper_joint_type;
  _right_gripper_joint_type right_gripper_joint;

   typedef  ::roborex::JointState_<ContainerAllocator>  _left_gripper_joint_type;
  _left_gripper_joint_type left_gripper_joint;





  typedef boost::shared_ptr< ::roborex::ArmPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborex::ArmPose_<ContainerAllocator> const> ConstPtr;

}; // struct ArmPose_

typedef ::roborex::ArmPose_<std::allocator<void> > ArmPose;

typedef boost::shared_ptr< ::roborex::ArmPose > ArmPosePtr;
typedef boost::shared_ptr< ::roborex::ArmPose const> ArmPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborex::ArmPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborex::ArmPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborex::ArmPose_<ContainerAllocator1> & lhs, const ::roborex::ArmPose_<ContainerAllocator2> & rhs)
{
  return lhs.world_joint == rhs.world_joint &&
    lhs.base_joint == rhs.base_joint &&
    lhs.shoulder_joint == rhs.shoulder_joint &&
    lhs.elbow_joint == rhs.elbow_joint &&
    lhs.wrist_joint == rhs.wrist_joint &&
    lhs.eff_joint == rhs.eff_joint &&
    lhs.gripper_offset_joint == rhs.gripper_offset_joint &&
    lhs.right_gripper_joint == rhs.right_gripper_joint &&
    lhs.left_gripper_joint == rhs.left_gripper_joint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborex::ArmPose_<ContainerAllocator1> & lhs, const ::roborex::ArmPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborex::ArmPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborex::ArmPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::ArmPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::ArmPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::ArmPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::ArmPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborex::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5e1af2ff95ce9860148ff20620f2dd0";
  }

  static const char* value(const ::roborex::ArmPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5e1af2ff95ce986ULL;
  static const uint64_t static_value2 = 0x0148ff20620f2dd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborex::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborex/ArmPose";
  }

  static const char* value(const ::roborex::ArmPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborex::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JointState world_joint\n"
"JointState base_joint\n"
"JointState shoulder_joint\n"
"JointState elbow_joint\n"
"JointState wrist_joint\n"
"JointState eff_joint\n"
"JointState gripper_offset_joint\n"
"JointState right_gripper_joint\n"
"JointState left_gripper_joint\n"
"================================================================================\n"
"MSG: roborex/JointState\n"
"geometry_msgs/Point translation\n"
"float32 angle\n"
"float32 upper_bound\n"
"float32 lower_bound\n"
"int32 axis\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborex::ArmPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborex::ArmPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world_joint);
      stream.next(m.base_joint);
      stream.next(m.shoulder_joint);
      stream.next(m.elbow_joint);
      stream.next(m.wrist_joint);
      stream.next(m.eff_joint);
      stream.next(m.gripper_offset_joint);
      stream.next(m.right_gripper_joint);
      stream.next(m.left_gripper_joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborex::ArmPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborex::ArmPose_<ContainerAllocator>& v)
  {
    s << indent << "world_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.world_joint);
    s << indent << "base_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.base_joint);
    s << indent << "shoulder_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.shoulder_joint);
    s << indent << "elbow_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.elbow_joint);
    s << indent << "wrist_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.wrist_joint);
    s << indent << "eff_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.eff_joint);
    s << indent << "gripper_offset_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.gripper_offset_joint);
    s << indent << "right_gripper_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.right_gripper_joint);
    s << indent << "left_gripper_joint: ";
    s << std::endl;
    Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.left_gripper_joint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOREX_MESSAGE_ARMPOSE_H
