// Generated by gencpp from file roborex/InverseKinematicsResponse.msg
// DO NOT EDIT!


#ifndef ROBOREX_MESSAGE_INVERSEKINEMATICSRESPONSE_H
#define ROBOREX_MESSAGE_INVERSEKINEMATICSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborex/ArmPose.h>

namespace roborex
{
template <class ContainerAllocator>
struct InverseKinematicsResponse_
{
  typedef InverseKinematicsResponse_<ContainerAllocator> Type;

  InverseKinematicsResponse_()
    : arm_pose()  {
    }
  InverseKinematicsResponse_(const ContainerAllocator& _alloc)
    : arm_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roborex::ArmPose_<ContainerAllocator>  _arm_pose_type;
  _arm_pose_type arm_pose;





  typedef boost::shared_ptr< ::roborex::InverseKinematicsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborex::InverseKinematicsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct InverseKinematicsResponse_

typedef ::roborex::InverseKinematicsResponse_<std::allocator<void> > InverseKinematicsResponse;

typedef boost::shared_ptr< ::roborex::InverseKinematicsResponse > InverseKinematicsResponsePtr;
typedef boost::shared_ptr< ::roborex::InverseKinematicsResponse const> InverseKinematicsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborex::InverseKinematicsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborex::InverseKinematicsResponse_<ContainerAllocator1> & lhs, const ::roborex::InverseKinematicsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.arm_pose == rhs.arm_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborex::InverseKinematicsResponse_<ContainerAllocator1> & lhs, const ::roborex::InverseKinematicsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborex::InverseKinematicsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::InverseKinematicsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::InverseKinematicsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abd3bdfb5df27b7635dddcbee1cd88ad";
  }

  static const char* value(const ::roborex::InverseKinematicsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabd3bdfb5df27b76ULL;
  static const uint64_t static_value2 = 0x35dddcbee1cd88adULL;
};

template<class ContainerAllocator>
struct DataType< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborex/InverseKinematicsResponse";
  }

  static const char* value(const ::roborex::InverseKinematicsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ArmPose arm_pose\n"
"\n"
"================================================================================\n"
"MSG: roborex/ArmPose\n"
"JointState world_joint\n"
"JointState base_joint\n"
"JointState shoulder_joint\n"
"JointState elbow_joint\n"
"JointState wrist_joint\n"
"JointState eff_joint\n"
"bool right_gripper_joint\n"
"bool left_gripper_joint\n"
"================================================================================\n"
"MSG: roborex/JointState\n"
"geometry_msgs/Point translation\n"
"float32 angle\n"
"float32 upper_bound\n"
"float32 lower_bound\n"
"int32 axis\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborex::InverseKinematicsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseKinematicsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborex::InverseKinematicsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborex::InverseKinematicsResponse_<ContainerAllocator>& v)
  {
    s << indent << "arm_pose: ";
    s << std::endl;
    Printer< ::roborex::ArmPose_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOREX_MESSAGE_INVERSEKINEMATICSRESPONSE_H
