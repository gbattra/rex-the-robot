// Generated by gencpp from file roborex/JointState.msg
// DO NOT EDIT!


#ifndef ROBOREX_MESSAGE_JOINTSTATE_H
#define ROBOREX_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace roborex
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : translation()
    , angle(0.0)
    , upper_bound(0.0)
    , lower_bound(0.0)
    , axis(0)  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : translation(_alloc)
    , angle(0.0)
    , upper_bound(0.0)
    , lower_bound(0.0)
    , axis(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _translation_type;
  _translation_type translation;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _upper_bound_type;
  _upper_bound_type upper_bound;

   typedef float _lower_bound_type;
  _lower_bound_type lower_bound;

   typedef int32_t _axis_type;
  _axis_type axis;





  typedef boost::shared_ptr< ::roborex::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborex::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::roborex::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::roborex::JointState > JointStatePtr;
typedef boost::shared_ptr< ::roborex::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborex::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborex::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborex::JointState_<ContainerAllocator1> & lhs, const ::roborex::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.translation == rhs.translation &&
    lhs.angle == rhs.angle &&
    lhs.upper_bound == rhs.upper_bound &&
    lhs.lower_bound == rhs.lower_bound &&
    lhs.axis == rhs.axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborex::JointState_<ContainerAllocator1> & lhs, const ::roborex::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborex::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborex::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::JointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborex::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b23171072f01fcca9054b0dc16f96450";
  }

  static const char* value(const ::roborex::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb23171072f01fccaULL;
  static const uint64_t static_value2 = 0x9054b0dc16f96450ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborex::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborex/JointState";
  }

  static const char* value(const ::roborex::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborex::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point translation\n"
"float32 angle\n"
"float32 upper_bound\n"
"float32 lower_bound\n"
"int32 axis\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborex::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborex::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation);
      stream.next(m.angle);
      stream.next(m.upper_bound);
      stream.next(m.lower_bound);
      stream.next(m.axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborex::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborex::JointState_<ContainerAllocator>& v)
  {
    s << indent << "translation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "upper_bound: ";
    Printer<float>::stream(s, indent + "  ", v.upper_bound);
    s << indent << "lower_bound: ";
    Printer<float>::stream(s, indent + "  ", v.lower_bound);
    s << indent << "axis: ";
    Printer<int32_t>::stream(s, indent + "  ", v.axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOREX_MESSAGE_JOINTSTATE_H
