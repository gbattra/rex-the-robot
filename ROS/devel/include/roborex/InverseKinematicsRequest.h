// Generated by gencpp from file roborex/InverseKinematicsRequest.msg
// DO NOT EDIT!


#ifndef ROBOREX_MESSAGE_INVERSEKINEMATICSREQUEST_H
#define ROBOREX_MESSAGE_INVERSEKINEMATICSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborex/ArmPose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace roborex
{
template <class ContainerAllocator>
struct InverseKinematicsRequest_
{
  typedef InverseKinematicsRequest_<ContainerAllocator> Type;

  InverseKinematicsRequest_()
    : init_arm_pose()
    , wrist_target()
    , eff_target()  {
    }
  InverseKinematicsRequest_(const ContainerAllocator& _alloc)
    : init_arm_pose(_alloc)
    , wrist_target(_alloc)
    , eff_target(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roborex::ArmPose_<ContainerAllocator>  _init_arm_pose_type;
  _init_arm_pose_type init_arm_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _wrist_target_type;
  _wrist_target_type wrist_target;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _eff_target_type;
  _eff_target_type eff_target;





  typedef boost::shared_ptr< ::roborex::InverseKinematicsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborex::InverseKinematicsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InverseKinematicsRequest_

typedef ::roborex::InverseKinematicsRequest_<std::allocator<void> > InverseKinematicsRequest;

typedef boost::shared_ptr< ::roborex::InverseKinematicsRequest > InverseKinematicsRequestPtr;
typedef boost::shared_ptr< ::roborex::InverseKinematicsRequest const> InverseKinematicsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborex::InverseKinematicsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborex::InverseKinematicsRequest_<ContainerAllocator1> & lhs, const ::roborex::InverseKinematicsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.init_arm_pose == rhs.init_arm_pose &&
    lhs.wrist_target == rhs.wrist_target &&
    lhs.eff_target == rhs.eff_target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborex::InverseKinematicsRequest_<ContainerAllocator1> & lhs, const ::roborex::InverseKinematicsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborex::InverseKinematicsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::InverseKinematicsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::InverseKinematicsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4140866b5a3a83d68264f18d4f2f7c78";
  }

  static const char* value(const ::roborex::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4140866b5a3a83d6ULL;
  static const uint64_t static_value2 = 0x8264f18d4f2f7c78ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborex/InverseKinematicsRequest";
  }

  static const char* value(const ::roborex::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ArmPose init_arm_pose\n"
"geometry_msgs/Pose wrist_target\n"
"geometry_msgs/Pose eff_target\n"
"\n"
"================================================================================\n"
"MSG: roborex/ArmPose\n"
"JointState world_joint\n"
"JointState base_joint\n"
"JointState shoulder_joint\n"
"JointState elbow_joint\n"
"JointState wrist_joint\n"
"JointState eff_joint\n"
"JointState gripper_offset_joint\n"
"JointState right_gripper_joint\n"
"JointState left_gripper_joint\n"
"================================================================================\n"
"MSG: roborex/JointState\n"
"geometry_msgs/Point translation\n"
"float32 angle\n"
"float32 upper_bound\n"
"float32 lower_bound\n"
"int32 axis\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::roborex::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init_arm_pose);
      stream.next(m.wrist_target);
      stream.next(m.eff_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseKinematicsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborex::InverseKinematicsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborex::InverseKinematicsRequest_<ContainerAllocator>& v)
  {
    s << indent << "init_arm_pose: ";
    s << std::endl;
    Printer< ::roborex::ArmPose_<ContainerAllocator> >::stream(s, indent + "  ", v.init_arm_pose);
    s << indent << "wrist_target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.wrist_target);
    s << indent << "eff_target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.eff_target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOREX_MESSAGE_INVERSEKINEMATICSREQUEST_H
