// Generated by gencpp from file roborex/TrajectoryPlannerResponse.msg
// DO NOT EDIT!


#ifndef ROBOREX_MESSAGE_TRAJECTORYPLANNERRESPONSE_H
#define ROBOREX_MESSAGE_TRAJECTORYPLANNERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roborex/Trajectory.h>

namespace roborex
{
template <class ContainerAllocator>
struct TrajectoryPlannerResponse_
{
  typedef TrajectoryPlannerResponse_<ContainerAllocator> Type;

  TrajectoryPlannerResponse_()
    : trajectories()  {
    }
  TrajectoryPlannerResponse_(const ContainerAllocator& _alloc)
    : trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::roborex::Trajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roborex::Trajectory_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;





  typedef boost::shared_ptr< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPlannerResponse_

typedef ::roborex::TrajectoryPlannerResponse_<std::allocator<void> > TrajectoryPlannerResponse;

typedef boost::shared_ptr< ::roborex::TrajectoryPlannerResponse > TrajectoryPlannerResponsePtr;
typedef boost::shared_ptr< ::roborex::TrajectoryPlannerResponse const> TrajectoryPlannerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator1> & lhs, const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.trajectories == rhs.trajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator1> & lhs, const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8815e9c3c7e5428d6d83e942eb0b7216";
  }

  static const char* value(const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8815e9c3c7e5428dULL;
  static const uint64_t static_value2 = 0x6d83e942eb0b7216ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborex/TrajectoryPlannerResponse";
  }

  static const char* value(const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Trajectory[] trajectories\n"
"\n"
"================================================================================\n"
"MSG: roborex/Trajectory\n"
"ArmPose[] poses\n"
"int32 id\n"
"\n"
"================================================================================\n"
"MSG: roborex/ArmPose\n"
"JointState world_joint\n"
"JointState base_joint\n"
"JointState shoulder_joint\n"
"JointState elbow_joint\n"
"JointState wrist_joint\n"
"JointState eff_joint\n"
"JointState gripper_offset_joint\n"
"JointState right_gripper_joint\n"
"JointState left_gripper_joint\n"
"================================================================================\n"
"MSG: roborex/JointState\n"
"geometry_msgs/Point translation\n"
"float32 angle\n"
"float32 upper_bound\n"
"float32 lower_bound\n"
"int32 axis\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPlannerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborex::TrajectoryPlannerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborex::TrajectoryPlannerResponse_<ContainerAllocator>& v)
  {
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roborex::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOREX_MESSAGE_TRAJECTORYPLANNERRESPONSE_H
