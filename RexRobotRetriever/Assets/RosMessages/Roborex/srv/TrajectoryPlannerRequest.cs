//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Roborex
{
    public class TrajectoryPlannerRequest : Message
    {
        public const string RosMessageName = "roborex/TrajectoryPlanner";

        public ArmPose arm_pose;
        public Geometry.Pose target;
        public float gripper_offset;
        public float eff_offset;

        public TrajectoryPlannerRequest()
        {
            this.arm_pose = new ArmPose();
            this.target = new Geometry.Pose();
            this.gripper_offset = 0.0f;
            this.eff_offset = 0.0f;
        }

        public TrajectoryPlannerRequest(ArmPose arm_pose, Geometry.Pose target, float gripper_offset, float eff_offset)
        {
            this.arm_pose = arm_pose;
            this.target = target;
            this.gripper_offset = gripper_offset;
            this.eff_offset = eff_offset;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(arm_pose.SerializationStatements());
            listOfSerializations.AddRange(target.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.gripper_offset));
            listOfSerializations.Add(BitConverter.GetBytes(this.eff_offset));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.arm_pose.Deserialize(data, offset);
            offset = this.target.Deserialize(data, offset);
            this.gripper_offset = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.eff_offset = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "TrajectoryPlannerRequest: " +
            "\narm_pose: " + arm_pose.ToString() +
            "\ntarget: " + target.ToString() +
            "\ngripper_offset: " + gripper_offset.ToString() +
            "\neff_offset: " + eff_offset.ToString();
        }
    }
}
