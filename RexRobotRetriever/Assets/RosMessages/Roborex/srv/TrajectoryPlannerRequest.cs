//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Roborex
{
    public class TrajectoryPlannerRequest : Message
    {
        public const string RosMessageName = "roborex/TrajectoryPlanner";

        public ArmPose arm_pose;
        public Geometry.Pose target;
        public bool grasp_trajectory;
        public bool release_trajectory;

        public TrajectoryPlannerRequest()
        {
            this.arm_pose = new ArmPose();
            this.target = new Geometry.Pose();
            this.grasp_trajectory = false;
            this.release_trajectory = false;
        }

        public TrajectoryPlannerRequest(ArmPose arm_pose, Geometry.Pose target, bool grasp_trajectory, bool release_trajectory)
        {
            this.arm_pose = arm_pose;
            this.target = target;
            this.grasp_trajectory = grasp_trajectory;
            this.release_trajectory = release_trajectory;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(arm_pose.SerializationStatements());
            listOfSerializations.AddRange(target.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.grasp_trajectory));
            listOfSerializations.Add(BitConverter.GetBytes(this.release_trajectory));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.arm_pose.Deserialize(data, offset);
            offset = this.target.Deserialize(data, offset);
            this.grasp_trajectory = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.release_trajectory = BitConverter.ToBoolean(data, offset);
            offset += 1;

            return offset;
        }

        public override string ToString()
        {
            return "TrajectoryPlannerRequest: " +
            "\narm_pose: " + arm_pose.ToString() +
            "\ntarget: " + target.ToString() +
            "\ngrasp_trajectory: " + grasp_trajectory.ToString() +
            "\nrelease_trajectory: " + release_trajectory.ToString();
        }
    }
}
